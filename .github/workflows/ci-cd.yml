name: Lint, Format, Build, Push & Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: ['**']

jobs:
  ci-check:
    name: Lint, Format, Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install dependencies
        run: npm ci --include=optional

      - name: Install sharp for Linux
        run: npm install --os=linux --cpu=x64 sharp

      - name: Run Lint
        run: npm run lint

      - name: Format Check
        run: npm run format

      - name: Build Project
        run: npm run build

  build-and-push:
    name: Build & Push Docker Image
    needs: ci-check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/grayson_frontend:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/grayson_frontend:latest

  deploy:
    name: Deploy to AWS EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Test SSH Connection
        run: ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH Connected Successfully!'"

      - name: Copy Compose & Scripts
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/${{ secrets.PACKAGE_NAME }}/scripts"
          scp -o StrictHostKeyChecking=no compose.yaml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ secrets.PACKAGE_NAME }}/compose.yaml
          scp -o StrictHostKeyChecking=no -r scripts ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ secrets.PACKAGE_NAME }}/scripts

      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} bash << 'EOF'
            set -euo pipefail
            export PACKAGE_NAME="${{ secrets.PACKAGE_NAME }}"
            export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            export DOCKER_PASSWORD="${{ secrets.DOCKER_PASSWORD }}"

            cd ~/$PACKAGE_NAME

            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            docker compose -f compose.yaml pull
            docker compose -f compose.yaml up -d --remove-orphans
          EOF
