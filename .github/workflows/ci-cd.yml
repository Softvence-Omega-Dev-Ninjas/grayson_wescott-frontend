name: Lint, Format, Build, Push & Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: ['**']

jobs:
  ci-check:
    name: Lint, Format, Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install dependencies
        run: npm ci --include=optional

      # - name: Install sharp for Linux
      #   run: npm install --os=linux --cpu=x64 sharp

      # - name: Install LightningCSS for Linux
      #   run: npm install --os=linux --cpu=x64 lightningcss

      - name: Run Lint
        run: npm run lint

      - name: Format Check
        run: npm run format

      # - name: Build Project
      #   run: npm run build

  build-and-push:
    name: Build & Push Docker Image
    needs: ci-check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/grayson_frontend:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/grayson_frontend:latest

  deploy:
    name: Deploy to AWS EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write private key
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Add server host key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Clean SSH config
          cat > ~/.ssh/config <<EOF
          Host deploy-server
            HostName ${{ secrets.VPS_HOST }}
            User ${{ secrets.VPS_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
          EOF

          chmod 600 ~/.ssh/config

      - name: Test SSH Connection
        run: ssh deploy-server "echo 'ðŸŽ‰ SSH Connected Successfully!'"

      - name: Copy Compose & Scripts
        run: |
          echo "Creating directories..."
          ssh deploy-server "mkdir -p ~/${{ secrets.PACKAGE_NAME}}/scripts"
          echo "Copying compose.yaml..."
          scp compose.yaml deploy-server:~/${{ secrets.PACKAGE_NAME}}/compose.yaml
          echo "Copying scripts folder..."
          scp -r scripts deploy-server:~/${{ secrets.PACKAGE_NAME}}/
          echo "âœ… Files copied successfully"

      - name: Fix permissions on server
        run: ssh deploy-server "chmod -R +x ~/${PACKAGE_NAME}/scripts/*.sh || true"

      - name: Deploy Application
        run: |
          ssh deploy-server bash << 'DEPLOY_EOF'
          set -euo pipefail

          # Set environment variables
          export PACKAGE_NAME="${{ secrets.PACKAGE_NAME }}"
          export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          export DOCKER_PASSWORD="${{ secrets.DOCKER_PASSWORD }}"

          cd ~/$PACKAGE_NAME

          # Login to Docker Hub
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          # Pull and run Docker Compose
          docker compose -f compose.yaml pull
          docker compose -f compose.yaml up -d --remove-orphans

          # Clean up
          docker logout
          docker image prune -f
          DEPLOY_EOF

      - name: Cleanup
        if: always()
        run: rm -rf ~/.ssh/deploy_key* ~/.ssh/config
